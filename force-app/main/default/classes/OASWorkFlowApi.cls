/*
 * SigniFlow OpenAPI Spec v1
 * ## SigniFlow API used to automate esignature workflow creation and management.\n
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@signiflow.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASWorkFlowApi {
    OASClient client;

    public OASWorkFlowApi(OASClient client) {
        this.client = client;
    }

    public OASWorkFlowApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * Create Workflow
     * #### Used to start a new workflow by passing a Base64 encoded document to SigniFlow
     * @param contentType  (required)
     * @param oaSCreateWorkflowRequest ##### Create Workflow Request Model (required)
     * @return OASCreateWorkflowResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASCreateWorkflowResponse createWorkflow(Map<String, Object> params) {
        client.assertNotNull(params.get('contentType'), 'contentType');
        client.assertNotNull(params.get('oaSCreateWorkflowRequest'), 'oaSCreateWorkflowRequest');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASCreateWorkflowResponse) client.invoke(
            'POST', '/CreateWorkflow',
            (OASCreateWorkflowRequest) params.get('oaSCreateWorkflowRequest'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'Content-Type' => (String) params.get('contentType')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            OASCreateWorkflowResponse.class
        );
    }
    /**
     * Get Document
     * #### Used to download a document from SigniFlow.
     * @param contentType  (required)
     * @param oaSGetDocumentRequest ##### Get Document Request Model (optional)
     * @return OASGetDocumentResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASGetDocumentResponse getDocument(Map<String, Object> params) {
        client.assertNotNull(params.get('contentType'), 'contentType');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASGetDocumentResponse) client.invoke(
            'POST', '/GetDoc',
            (OASGetDocumentRequest) params.get('oaSGetDocumentRequest'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'Content-Type' => (String) params.get('contentType')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            OASGetDocumentResponse.class
        );
    }
    /**
     * Add a Workflow step
     * #### Used to add a step to a document Workflow process.
     * @param contentType  (required)
     * @param oaSAddWorkflowStepV2Request ##### Add A Workflow Step Request Model (optional)
     * @return OASAddWokflowStepV2Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASAddWokflowStepV2Response postAddWorkflowStep(Map<String, Object> params) {
        client.assertNotNull(params.get('contentType'), 'contentType');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASAddWokflowStepV2Response) client.invoke(
            'POST', '/AddWorkflowStepV2',
            (OASAddWorkflowStepV2Request) params.get('oaSAddWorkflowStepV2Request'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'Content-Type' => (String) params.get('contentType')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            OASAddWokflowStepV2Response.class
        );
    }
    /**
     * Cancel Flow
     * #### Used to cancel a document workflow.
     * @param contentType  (required)
     * @param oaSCancelFlowRequest ##### Cancel Flow Request Model (optional)
     * @return OASCancelFlowResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASCancelFlowResponse postCancelFlow(Map<String, Object> params) {
        client.assertNotNull(params.get('contentType'), 'contentType');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASCancelFlowResponse) client.invoke(
            'POST', '/CancelFlow',
            (OASCancelFlowRequest) params.get('oaSCancelFlowRequest'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'Content-Type' => (String) params.get('contentType')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            OASCancelFlowResponse.class
        );
    }
    /**
     * Delete Document
     * #### This is used to delete a document.
     * @param contentType  (required)
     * @param oaSDeleteDocRequest ##### Delete Document Request Model (optional)
     * @return OASDeleteDocResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASDeleteDocResponse postDeleteDoc(Map<String, Object> params) {
        client.assertNotNull(params.get('contentType'), 'contentType');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASDeleteDocResponse) client.invoke(
            'POST', '/DeleteDoc',
            (OASDeleteDocRequest) params.get('oaSDeleteDocRequest'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'Content-Type' => (String) params.get('contentType')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            OASDeleteDocResponse.class
        );
    }
    /**
     * Document Prepper Add Fields
     * #### Used to add fields to a document using the user\&#39;s FlowID.
     * @param contentType  (required)
     * @param oaSDocPrepperAddFieldsFlowIDRequest ##### Document Prepper Add Fields Request Model (optional)
     * @return OASDocPrepperAddFieldsFlowIDResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASDocPrepperAddFieldsFlowIDResponse postDocPrepperAddField(Map<String, Object> params) {
        client.assertNotNull(params.get('contentType'), 'contentType');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASDocPrepperAddFieldsFlowIDResponse) client.invoke(
            'POST', '/DocPrepperAddFieldsFlowID',
            (OASDocPrepperAddFieldsFlowIDRequest) params.get('oaSDocPrepperAddFieldsFlowIDRequest'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'Content-Type' => (String) params.get('contentType')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            OASDocPrepperAddFieldsFlowIDResponse.class
        );
    }
    /**
     * Document Prepper Add Advanced Fields
     * #### Used to add advanced fields to a document.
     * @param contentType  (required)
     * @param oaSDocPrepperAddAdvancedFieldsReques ##### Document Prepper Add Advanced Fields Request Model (optional)
     * @return OASDocPrepperAddAdvancedFieldsRespon
     * @throws OAS.ApiException if fails to make API call
     */
    public OASDocPrepperAddAdvancedFieldsRespon postDocPrepperAdvancedFields(Map<String, Object> params) {
        client.assertNotNull(params.get('contentType'), 'contentType');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASDocPrepperAddAdvancedFieldsRespon) client.invoke(
            'POST', '/DocPrepperAdvancedFields',
            (OASDocPrepperAddAdvancedFieldsReques) params.get('oaSDocPrepperAddAdvancedFieldsReques'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'Content-Type' => (String) params.get('contentType')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            OASDocPrepperAddAdvancedFieldsRespon.class
        );
    }
    /**
     * FullWorkflow
     * #### Used to create a fullworkflow for a document.
     * @param contentType  (required)
     * @param oaSFullWorkflowRequest ##### FullWorkflow Request Model (optional)
     * @return OASFullWorkflowResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASFullWorkflowResponse postFullWorkflow(Map<String, Object> params) {
        client.assertNotNull(params.get('contentType'), 'contentType');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASFullWorkflowResponse) client.invoke(
            'POST', '/FullWorkflow',
            (OASFullWorkflowRequest) params.get('oaSFullWorkflowRequest'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'Content-Type' => (String) params.get('contentType')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            OASFullWorkflowResponse.class
        );
    }
    /**
     * Get Document Status
     * #### Used to get the status of the document ex. pending/completed/rejected.
     * @param contentType  (required)
     * @param oaSGetDocStatusRequest ##### Get Document Status Request Model (optional)
     * @return OASGetDocStatusResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASGetDocStatusResponse postGetDocStatus(Map<String, Object> params) {
        client.assertNotNull(params.get('contentType'), 'contentType');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASGetDocStatusResponse) client.invoke(
            'POST', '/GetDocStatus',
            (OASGetDocStatusRequest) params.get('oaSGetDocStatusRequest'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'Content-Type' => (String) params.get('contentType')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            OASGetDocStatusResponse.class
        );
    }
    /**
     * Initiate Flow
     * #### Used to initiate aworkflow of a document.
     * @param contentType  (required)
     * @param oaSInitiateFlowRequest ##### Initiate Flow Request Model (optional)
     * @return OASInitiateFlowResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASInitiateFlowResponse postInitiateFlow(Map<String, Object> params) {
        client.assertNotNull(params.get('contentType'), 'contentType');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASInitiateFlowResponse) client.invoke(
            'POST', '/InitiateFlow',
            (OASInitiateFlowRequest) params.get('oaSInitiateFlowRequest'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'Content-Type' => (String) params.get('contentType')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            OASInitiateFlowResponse.class
        );
    }
    /**
     * Initiate Flow No Email
     * #### Used to initiate a workflow without sending out emails.
     * @param contentType  (required)
     * @param oaSInitiateFlowNoEmailRequest ##### Initiate Flow No Email Request Model (optional)
     * @return OASInitiateFlowNoEmailResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASInitiateFlowNoEmailResponse postInitiateFlowNoEmail(Map<String, Object> params) {
        client.assertNotNull(params.get('contentType'), 'contentType');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASInitiateFlowNoEmailResponse) client.invoke(
            'POST', '/InitiateFlow_No_Email',
            (OASInitiateFlowNoEmailRequest) params.get('oaSInitiateFlowNoEmailRequest'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'Content-Type' => (String) params.get('contentType')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            OASInitiateFlowNoEmailResponse.class
        );
    }
    /**
     * Initiate Flow No Initial Email
     * #### Used to initiate a document workflow without an initial email being sent to the user.
     * @param contentType  (required)
     * @param oaSInitiateFlowNoInitialEmailRequest ##### Initiate Flow No Initial Email Request Model (optional)
     * @return OASInitiateFlowNoInitialEmailRespons
     * @throws OAS.ApiException if fails to make API call
     */
    public OASInitiateFlowNoInitialEmailRespons postInitiateFlowNoInitialEmail(Map<String, Object> params) {
        client.assertNotNull(params.get('contentType'), 'contentType');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASInitiateFlowNoInitialEmailRespons) client.invoke(
            'POST', '/InitiateFlow_No_Initial_Email',
            (OASInitiateFlowNoInitialEmailRequest) params.get('oaSInitiateFlowNoInitialEmailRequest'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'Content-Type' => (String) params.get('contentType')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            OASInitiateFlowNoInitialEmailRespons.class
        );
    }
    /**
     * Workflow Sign
     * #### Used to send a request to a user to sign a document workflow.
     * @param contentType  (required)
     * @param oaSWorkflowSignRequest ##### Workflow Sign Request Model (optional)
     * @return OASWorkflowSignResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASWorkflowSignResponse postWorkflowSign(Map<String, Object> params) {
        client.assertNotNull(params.get('contentType'), 'contentType');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASWorkflowSignResponse) client.invoke(
            'POST', '/WorkflowSign',
            (OASWorkflowSignRequest) params.get('oaSWorkflowSignRequest'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>{
                'Content-Type' => (String) params.get('contentType')
            },
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            OASWorkflowSignResponse.class
        );
    }
}
